NOTES:

- Install PHP 8.3 or higher and these PHP extensions (which are installed and enabled by default in most PHP 8 installations): Ctype, iconv, PCRE, Session, SimpleXML, and Tokenizer;

- Install Composer, which is used to install PHP packages.

- Symfony CLI
curl -1sLf 'https://dl.cloudsmith.io/public/symfony/stable/setup.deb.sh' | sudo -E bash
sudo apt install symfony-cli

symfony check:requirements

- traditional web app
symfony new little_dot_website --webapp
symfony new little_dot_website --version=lts --webapp

- microservice, console application or API:
symfony new my_project_directory

- displays information about the project -
bin/console about

- symfony server -
symfony server:start
symfony server:start -d

- check whether a project's dependencies contain any known security vulnerability -
symfony check:security

- command that checks security vulnerabilities in the dependencies of the app
bin/console importmap:audit


----------------
DOCTRINE INSTALL
----------------
composer require symfony/orm-pack


-----------
MAKE ENTITY
-----------
bin/console make:entity
sh entity-make.sh


-------------
MAKE DATABASE
-------------
bin/console doctrine:database:create
docker compose exec php bin/console doctrine:database:create


----------
MIGRATIONS
----------
bin/console doctrine:migrations:diff
sh diff-migrations.sh

bin/console doctrine:migrations:migrate
sh migrations-migrate.sh

bin/console make:migration
docker compose exec php bin/console make:migration

bin/console doctrine:schema:validate
docker compose exec php bin/console doctrine:schema:validate

- list all migrations
bin/console doctrine:migrations:list
docker compose exec php bin/console doctrine:migrations:list

- revert of migration
bin/console doctrine:migrations:execute 'DoctrineMigrations\Version' --down
docker compose exec php bin/console doctrine:migrations:execute 'DoctrineMigrations\Version' --down

bin/console doctrine:migrations:execute 'DoctrineMigrations\Version' --up
docker compose exec php bin/console doctrine:migrations:execute 'DoctrineMigrations\Version' --up

- fixtures
bin/console doctrine:fixtures:load
docker compose exec php bin/console doctrine:fixtures:load

vendor/bin/doctrine orm:schema-tool:update --dump-sql
vendor/bin/doctrine orm:schema-tool:update --force


-----------
DEBUG TOOLS
-----------
composer require --dev symfony/debug-bundle symfony/monolog-bundle


--------
SECURITY
--------
https://symfony.com/doc/6.4/security.html

composer require symfony/security-bundle

php bin/console make:user
docker compose exec php bin/console make:user

php bin/console make:migration
docker compose exec php bin/console make:migration

php bin/console doctrine:migrations:migrate
sh migrations-migrate.sh

- You can also manually hash a password by running:
php bin/console security:hash-password

- registration
composer require symfonycasts/verify-email-bundle
php bin/console make:registration-form
docker compose exec php bin/console make:registration-form

- login
php bin/console make:security:form-login
docker compose exec php bin/console make:security:form-login

php bin/console make:controller Login
docker compose exec php bin/console make:controller Login

- limiting login attempts
composer require symfony/rate-limiter

- set hashed password
bin/console security:hash-password
docker compose exec php bin/console security:hash-password

- permissions for /public/uploads directory
sudo chmod -R 777 uploads


----------
.env.local
----------
DATABASE_URL=mysql://root:pass1234@mysql-little_dot_website:3306/little_dot_website_dev
APP_ENV=dev
APP_DEBUG=true


------------------
DEFAULT ADMIN USER
------------------
username: admin@net.com
password: admin1234

INSERT INTO `effistorian_dev`.`user` (`id`, `email`, `user_name`, `password`, `roles`, `first_name`, `last_name`, `active`) VALUES (1, 'admin@net.com', 'admin', '$2y$13$woWveCWpnhEiWPirdbvZu.nBRaKujD07uaFiJhkI/eEtQs5z9S36e', '["ROLE_ADMIN"]', 'Admin', 'User', 1);


------
ASSETS
------
- styles/custom.css
- app.js (if using importmap)

composer require symfony/asset-mapper

bin/console cache:clear
sh clear-cache.sh

bin/console assets:install
docker compose exec php bin/console assets:install

bin/console debug:asset-map
docker compose exec php bin/console debug:asset-map

bin/console asset-map:compile
sh asset-map-compile.sh


--------
PHP-STAN
--------
composer require --dev phpstan/phpstan
vendor/bin/phpstan analyze --memory-limit=1G
sh phpstan.sh


------------
PHP-CS-Fixer
------------
composer require cs-fixer-shim
./vendor/bin/php-cs-fixer
./vendor/bin/php-cs-fixer fix


-----------
CODESNIFFER
-----------
composer require --dev squizlabs/php_codesniffer

vendor/bin/phpcs src
vendor/bin/phpcbf src


------
DOCKER
------
sh up.sh
sh down.sh
sh asset-map-compile.sh
sh clear-cache.sh
sh diff-migrations.sh
sh entity-make.sh
sh migrations-migrate.sh
sh router-debug.sh
sh lint-twig.sh
sh phpstan.sh
sh fix.sh

- IMPORTANT!!!
- use 'docker compose exec php' in front of the 'bin/console' command if app is running in docker

docker compose exec php bin/console cache:clear
docker compose exec php bin/console make:entity
docker compose exec php bin/console doctrine:migrations:diff
docker compose exec php bin/console doctrine:migrations:migrate
docker compose exec php bin/console asset-map:compile

- mkdir uploads/documents permission
chmod 777 /home/user/directory/project/anotherdir

- change permissions
sudo chown user:user security.yaml


------
MAILER
------
###> symfony/mailer ###
MAILER_DSN=smtp://mailpit-effistorian:1025
###< symfony/mailer ###

###> karser/recaptcha3-bundle ###
RECAPTCHA3_KEY=my_site_key
RECAPTCHA3_SECRET=my_secret
###< karser/recaptcha3-bundle ###


-----------------
DEPLOY FIRST TIME
-----------------
- backup database

- download and backup .env files

- delete all other files

- git clone

# 1. Initialize Git in the current directory if not already a Git repo
git init
git config user.name 'Jasmin Medved'
git config user.email 'jmedved85@gmail.com'

# 2. Add the remote repository
git remote add origin git@github.com:jmedved85/little_dot_website.git

# 3. Fetch the remote repository contents
git fetch

# 4. Create a backup of critical files
mkdir -p ~/backup-config
cp .env.local ~/backup-config/
cp .env.local.php ~/backup-config/

# 5. Checkout the main branch while keeping your local files
git checkout -b main
git reset --mixed origin/main

# 6. Restore any backed-up files if they were overwritten
cp ~/backup-config/* .


- run deploy script
sh deploy.sh

- if it is needed:

# Create the essential directory structure
mkdir -p var/cache/prod
mkdir -p var/log
mkdir -p var/sessions

# Set permissions
chmod -R 775 var

- check what's different between mappings and the database
php bin/console doctrine:schema:update --dump-sql --env=prod


---
GIT
---
- compare branches
git diff --name-status branch1..branch2


--------------
APP PRODUCTION
--------------
- on local before vendor uploading
composer install --no-dev --optimize-autoloader --prefer-dist


CACHE CLEAR PROD
----------------
- clear cache
php bin/console cache:clear --env=prod --no-debug

- Warm up the cache: After clearing the cache, you can warm it up to improve the application’s initial response time:
php bin/console cache:warmup --env=prod --no-debug


ASSETS COMPILE PROD
-------------------
- delete old assets

cd public_html
rm -r assets

- clear cache on hostinger

- clear cache
php bin/console cache:clear --env=prod --no-debug

- Warm up the cache: After clearing the cache, you can warm it up to improve the application’s initial response time:
php bin/console cache:warmup --env=prod --no-debug

- Warm up assets: In production, assets like CSS and JavaScript files should be compiled and optimized.
php bin/console assets:install public_html --env=prod

- Compile assets
php bin/console asset-map:compile --env=prod

mv public/assets public_html/

rm -rf public

- clear cache
php bin/console cache:clear --env=prod --no-debug

- Warm up the cache: After clearing the cache, you can warm it up to improve the application’s initial response time:
php bin/console cache:warmup --env=prod --no-debug

-------------------

For a production Symfony application, there are several additional commands you might want to use to optimize the performance and ensure everything runs smoothly:

- Warm up the cache: After clearing the cache, you can warm it up to improve the application’s initial response time:
php bin/console cache:warmup --env=prod --no-debug

- Optimize the autoloader: Symfony's autoloader can be optimized for production to reduce the overhead of autoloading classes:
composer install --no-dev --optimize-autoloader --prefer-dist

- Generate a production-ready container: This command compiles the service container into a highly optimized form for production, improving performance:
php bin/console cache:clear --env=prod --no-debug

- Run migrations: Ensure your database schema is up to date by running any pending migrations:
php bin/console doctrine:migrations:migrate --env=prod --no-interaction

- Clear Doctrine metadata cache: To ensure that the Doctrine ORM's metadata is up-to-date and optimized:
php bin/console doctrine:cache:clear-metadata --env=prod

- Clear query cache: Clear the query cache to avoid outdated or inefficient queries being executed:
php bin/console doctrine:cache:clear-query --env=prod

- Clear result cache: Clear the result cache to remove any cached results of database queries:
php bin/console doctrine:cache:clear-result --env=prod

- Check the Symfony health status: It's good practice to monitor your application’s status. Symfony's health check can give you useful insights:
php bin/console server:status

- Enable Profiler in production (optional): Although it’s not recommended for production, if you need to enable the profiler for debugging, you can do so:
php bin/console debug:router --env=prod

These commands will help ensure that your Symfony application is optimized, the environment is correctly configured, and the application runs efficiently in production.